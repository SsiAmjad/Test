FUNCTION "Gestion_Liquide_Melangeuse" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Fg_Base : Bool;
      Raz_Pt_Zs : "S_Suivi_Dosage";
   END_VAR

   VAR_IN_OUT 
      Liq_Mel : "S_Liquide_Mel";
   END_VAR

   VAR_TEMP 
      Ret_Test_Lot_Att_Tache : SInt;
      Ret_Maj_Niv : SInt;
      Ret_Test_Etat_Mobile : SInt;
      Ret_Arr_Imm_Mobile : SInt;
      Consigne_Arret : Bool;
      Etat_Pompe : USInt;
      Consigne_PV : Bool;
      Etat_Mlg : USInt;
      Raz_Affiche_Compo : "Affich_Compo";
      Raz_Compo : "S_Com_Fab";
      i : USInt;
      Niv_Tache_Autre : USInt;
      Ret_RD_SYS_T : Int;
      Tps_Act : Date_And_Time;
      Msg_Def : String;
      Ret_Proc_MAJ_Stock : String;
      Err_Sql : String;
      Tps_Passe : Time;
      Aff_Def : Bool;
      Mess_Def : String;
   END_VAR

   VAR CONSTANT 
      Etp_Repos : SInt := 0;
      Etp_Att_Lot_Mel : SInt := 1;
      Etp_Controles : SInt := 2;
      Etp_Priorites : SInt := 3;
      Etp_Att_Fin_Premelang : SInt := 4;
      Etp_Test_Interdiction : SInt := 5;
      Etp_RAZ_Compteur : SInt := 6;
      Etp_Demarrage : SInt := 7;
      Etp_Att_Fin_Inj : SInt := 8;
      Etp_Att_Liq_Pour_Chgt : SInt := 9;
      Etp_Att_Marche_Melangeuse : SInt := 10;
      Etp_Sur_Intensite_Melangeuse : SInt := 11;
      Etp_Non_Evol : SInt := 12;
      Etp_Chasse_Air : SInt := 13;
      Etp_Att_Fin_Melang : SInt := 14;
      Etp_Fin_Lot : SInt := 15;
      Etp_Att_Acq : SInt := 16;
      POS_OUVERTURE : SInt := 1;
      POS_FERMETURE : SInt := 0;
   END_VAR


BEGIN
	// Simulateur de poids
	#Liq_Mel.Simul._ModeSimul := "Test_Etat_Mobile"(Index_Mobile := #Liq_Mel._Mob_Pompe, Etat := "Pret");
	#Liq_Mel.Simul._ValBascInc := "Test_Etat_Mobile"(Index_Mobile := #Liq_Mel._Mob_Pompe, Etat := "Pret");
	IF #Liq_Mel.Simul._ModeSimul THEN
	    "FC_Simul_Impul"(Simul := #Liq_Mel.Simul,
	                     Poids_Simul := #Liq_Mel._Compteur_Impuls );
	   
	END_IF;
	// Simulateur de poids
	
	//=========== COMPTEUR DES IMPULSIONS ===========//
	IF #Liq_Mel._Type_Compteur = 'M' THEN
	    #Liq_Mel.Comp.Net := #Liq_Mel._Compteur_Impuls * #Liq_Mel._Val_Impuls;
	ELSE
	    #Liq_Mel.Comp.Net := #Liq_Mel._Compteur_Impuls * #Liq_Mel._Val_Impuls * #Liq_Mel._Densite;
	END_IF;
	//=========== COMPTEUR DES IMPULSIONS ===========//
	
	//============= Affichage Etiquette =============//
	"FC_Affich_Etiquette"(Couleur := #Liq_Mel.Pt_Zs._SuiviCommun._Couleur,
	                      Cel_Dest := #Liq_Mel.Pt_Zs._Cel_Dest,
	                      CdMat := #Liq_Mel.Pt_Zs._SuiviCommun._CdMat,
	                      NoLot := #Liq_Mel.Pt_Zs._SuiviCommun._NoLot,
	                      QteLot := #Liq_Mel.Pt_Zs._SuiviCommun._QteLot,
	                      Desc_Etp := #Liq_Mel.CommunDos.Module_Commun._DescEtp,
	                      Etiquette := #Liq_Mel.CommunDos);
	//============= Affichage Etiquette =============//
	
	#Ret_RD_SYS_T := RD_SYS_T(#Tps_Act);
	CASE #Liq_Mel.CommunDos.Module_Commun._Etp OF
	    #Etp_Repos:
	        REGION Preliminaire Repos
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'REPOS';
	                #Liq_Mel.Pt_Zs := #Raz_Pt_Zs;
	                #Liq_Mel.Comp := #Raz_Compo;
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo :=#Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Repos
	        REGION Cyclique Repos
	            #Ret_Test_Lot_Att_Tache := "Test_Lot_Att_Tache"(Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                                            Num_Zone => #Liq_Mel.CommunDos.Module_Commun._NumZone);
	            IF #Ret_Test_Lot_Att_Tache = 1 THEN
	                #Liq_Mel.Pt_Zs := "DB_Data_Dosage"."THIS"[#Liq_Mel.CommunDos.Module_Commun._NumZone];
	                #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone,
	                                          Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                          Niveau := "NIV_LIQ_DEBUT_LOT");
	                FOR #i := 0 TO "Nbr_Max_Compo_Pt_Zs" DO
	                    IF (#Liq_Mel.Pt_Zs._Lst_Compos[#i].Num_Liq_Mlg = #Liq_Mel._Num_Liq) AND (#Liq_Mel.Pt_Zs._Lst_Compos[#i].Num_Liq_Mlg > -1) THEN
	                        #Liq_Mel.Comp := #Liq_Mel.Pt_Zs._Lst_Compos[#i];
	                        EXIT;
	                    END_IF;
	                END_FOR;
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Att_Lot_Mel;
	            END_IF;
	        END_REGION Cyclique Repos 
	    #Etp_Att_Lot_Mel:
	        REGION Preliminaire Att Lot Mel
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'ATT LOT MLG';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Lot Mel
	        REGION Cyclique Att Lot Mel
	            IF NOT "FC_Test_Niv_AmontAval"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone, Lst_Taches := #Liq_Mel.Lst_Taches_Att_Debut_Mel) THEN
	                RETURN;
	            END_IF;
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Controles;
	        END_REGION Cyclique Att Lot Mel
	    #Etp_Controles:
	        REGION Preliminaire Controles
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'CONTROLE';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Controles
	        REGION Cyclique Controles
	            FOR #i := 0 TO "Nbr_Max_Compo" DO
	                IF #Liq_Mel.Pt_Zs._Lst_Compos[#i].Num_Liq_Mlg = #Liq_Mel._Num_Liq AND (#Liq_Mel.Pt_Zs._Lst_Compos[#i].Num_Liq_Mlg > -1) THEN
	                    #Liq_Mel.Comp := #Liq_Mel.Pt_Zs._Lst_Compos[#i];
	                    #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Priorites;
	                    RETURN;
	                END_IF;
	           END_FOR;
	       END_REGION Cyclique Controles
	    #Etp_Priorites:
	        REGION Preliminaire Priorites
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'PRIORITE';
	                #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone,
	                                          Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                          Niveau := "NIV_LIQ_FIN_CONTROLES");
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Priorites
	        REGION Cyclique Priorites
	            IF NOT "FC_Gest_Priorite"(#Liq_Mel)THEN
	                RETURN;
	            END_IF;
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Att_Fin_Premelang;
	        END_REGION Cyclique Priorites
	    #Etp_Att_Fin_Premelang:
	        REGION Preliminaire Att Fin Premelang
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'ATT FIN PRE-MLG';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Fin Premelang
	        REGION Cyclique Att Fin Premelang
	            IF NOT "FC_Test_Niv_AmontAval"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone, Lst_Taches := #Liq_Mel.Lst_Taches_Att_Fin_Premel) THEN
	                RETURN;
	            END_IF;
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Test_Interdiction;
	        END_REGION Cyclique Att Fin Premelang
	    #Etp_Test_Interdiction:
	        REGION Preliminaire Test Interdiction
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'TEST INTERDICT';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Test Interdiction
	        REGION Cyclique Test Interdiction
	            IF #Liq_Mel._Interdiction_Inj THEN
	                RETURN;
	            END_IF;
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_RAZ_Compteur;
	        END_REGION Cyclique Test Interdiction
	    #Etp_RAZ_Compteur:
	        REGION Preliminaire RAZ Compteur
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'RAZ COMPT';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire RAZ Compteur
	        REGION Cyclique RAZ Compteur
	            #Liq_Mel._Compteur_Impuls := 0;
	            IF #Liq_Mel._Chute > 0 THEN
	                IF #Liq_Mel._Chute_Maxi > 0 THEN
	                    IF #Liq_Mel._Chute > #Liq_Mel._Chute_Maxi THEN
	                        #Liq_Mel._Chute := #Liq_Mel._Chute_Maxi;
	                    END_IF;
	                END_IF;
	            END_IF;
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Demarrage;
	        END_REGION Cyclique RAZ Compteur
	    #Etp_Demarrage:
	        REGION Preliminaire Demarrage
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'DEMARRAGE';
	                #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone,
	                                          Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                          Niveau := "NIV_LIQ_INJ_ENC");
	                "Liquides_MLG_FC_Prelim_Demarrage"(#Liq_Mel);
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Demarrage
	        REGION Cyclique Demarrage
	                IF #Liq_Mel._Fg_GV_PV THEN
	                    #Liq_Mel._SAV_Pompe := #Liq_Mel.Comp.Vit_PV;
	                ELSE
	                    #Liq_Mel._SAV_Pompe := #Liq_Mel.Comp.Vit_GV;
	                END_IF;
	                IF  "Valid_Index"(#Liq_Mel._Mob_Vanne1) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne1,
	                                   Position := #POS_OUVERTURE);
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne2) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne2,
	                                   Position := #POS_OUVERTURE);
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Pompe) THEN
	                    "Dem_Pompe"(Index_Pompe := #Liq_Mel._Mob_Pompe,
	                                Vitesse := #Liq_Mel.Comp.Vit_GV);
	                END_IF;
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Att_Fin_Inj;
	        END_REGION Cyclique Demarrage
	    #Etp_Att_Fin_Inj:
	        REGION Preliminaire Att Fin Inj
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'ATT FIN INJ.';
	                #Liq_Mel._Poids_Memo := #Liq_Mel.Comp.Net;
	                #Ret_RD_SYS_T := RD_SYS_T(#Liq_Mel.CommunDos.Module_Commun._TpsPicke);
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Fin Inj
	        REGION Cyclique Att Fin Inj
	            // Calcul de la consigne passage en PV
	            #Consigne_PV := #Liq_Mel.Comp.Net >= #Liq_Mel.Comp.Poids - #Liq_Mel.Comp.Seuil_PV;
	            // Calcul de la consigne arret injection
	            #Consigne_Arret := #Liq_Mel.Comp.Net >= #Liq_Mel.Comp.Poids - #Liq_Mel._Chute;
	            IF NOT "Tempo"(Tps_Picke:=#Liq_Mel.CommunDos.Module_Commun._TpsPicke,Duree:=#Liq_Mel._Tps_Evol_Poids,Anticip:= (#Consigne_PV OR #Consigne_Arret) ,Tps_Passe=>#Tps_Passe) THEN
	                RETURN;
	            END_IF;
	            IF ((#Liq_Mel.Comp.Net - #Liq_Mel._Poids_Memo) <= #Liq_Mel._Pas_Min_Evol) AND NOT (#Consigne_PV OR #Consigne_Arret) THEN
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Non_Evol;
	                RETURN;
	            ELSE
	                #Liq_Mel._Poids_Memo := #Liq_Mel.Comp.Net;
	            END_IF;
	            IF #Consigne_PV THEN
	                IF "Valid_Index"(#Liq_Mel._Mob_Pompe) THEN
	                    "Dem_Pompe"(Index_Pompe := #Liq_Mel._Mob_Pompe,
	                                Vitesse := #Liq_Mel.Comp.Vit_PV);
	                END_IF;
	            END_IF;
	            IF #Consigne_Arret THEN
	                IF #Liq_Mel._Mob_Pompe > -1 THEN
	                    #Ret_Arr_Imm_Mobile := "Arr_Imm_Mobile"("Index_Mobile" := #Liq_Mel._Mob_Pompe);
	                END_IF;
	                // Attente arret de la pompe
	                IF NOT "Test_Etat_Mobile"("Index_Mobile" := #Liq_Mel._Mob_Pompe, Etat:="Libre") THEN
	                    RETURN;
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne1) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne1,
	                                   Position := #POS_FERMETURE);
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne2) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne2,
	                                   Position := #POS_FERMETURE);
	                END_IF;
	                "Maj_Qte_Tache"(Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone,
	                                Qte := #Liq_Mel.Comp.Net);
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Chasse_Air;
	                RETURN;
	            END_IF;
	            // Melangeuse non prete (DEFAUT) 
	            IF NOT "PretMobMel"(#Liq_Mel._Mob_Mlg) THEN
	                IF "Valid_Index"(#Liq_Mel._Mob_Pompe) THEN
	                    #Ret_Arr_Imm_Mobile := "Arr_Imm_Mobile"("Index_Mobile" := #Liq_Mel._Mob_Pompe);
	                END_IF;
	                // Attente arret de la pompe
	                IF NOT "Test_Etat_Mobile"("Index_Mobile" := #Liq_Mel._Mob_Pompe, Etat:="Libre") THEN
	                    RETURN;
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne1) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne1,
	                                   Position := #POS_FERMETURE);
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne2) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne2,
	                                   Position := #POS_FERMETURE);
	                END_IF;
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Chasse_Air;
	                RETURN;
	            END_IF;
	            // Test defaut sur-intensite
	            IF #Liq_Mel._Fg_SurIntensite THEN
	                IF "Valid_Index"(#Liq_Mel._Mob_Pompe) THEN
	                    #Ret_Arr_Imm_Mobile := "Arr_Imm_Mobile"("Index_Mobile" := #Liq_Mel._Mob_Pompe);
	                END_IF;
	                // Attente arret de la pompe
	                IF NOT "Test_Etat_Mobile"("Index_Mobile" := #Liq_Mel._Mob_Pompe, Etat:="Libre") THEN
	                    RETURN;
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne1) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne1,
	                                   Position := #POS_FERMETURE);
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne2) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne2,
	                                   Position := #POS_FERMETURE);
	                END_IF;
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Sur_Intensite_Melangeuse;
	                RETURN;
	            END_IF;
	        END_REGION Cyclique Att Fin Inj
	    #Etp_Att_Liq_Pour_Chgt:
	        REGION Preliminaire Att Liq Pour Chgt
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'ATT CHGT LIQ.';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Liq Pour Chgt
	        REGION Cyclique Att Liq Pour Chgt
	            
	        END_REGION Cyclique Att Liq Pour Chgt
	    #Etp_Att_Marche_Melangeuse:
	        REGION Preliminaire Att Marche Melangeuse
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'ATT MARCHE MLG';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Marche Melangeuse
	        REGION Cyclique Att Marche Melangeuse
	            IF NOT "PretMobMel"(#Liq_Mel._Mob_Mlg) THEN
	                RETURN;
	            END_IF;
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Demarrage;
	        END_REGION Cyclique Att Marche Melangeuse
	    #Etp_Sur_Intensite_Melangeuse:
	        REGION Preliminaire Sur Intensite Melangeuse
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'SUR INT. MLG';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Sur Intensite Melangeuse
	        REGION Cyclique Sur Intensite Melangeuse
	            
	        END_REGION Cyclique Sur Intensite Melangeuse
	    #Etp_Non_Evol:
	        REGION Preliminaire Non Evol
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'NON EVOL.';
	                #Liq_Mel.CommunDos.Module_Commun._EtpPrec := #Liq_Mel.CommunDos.Module_Commun._Etp;
	                //=== Traitement cas retour de defaut ===//
	                IF #Liq_Mel.Dial_Def.Reponse_Def <> '' THEN
	                    #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	                    CASE #Liq_Mel.Dial_Def.Num_Def_Etape OF
	                        1:
	                            GOTO Non_Evol_DEF1;
	                    END_CASE;
	                END_IF;
	                //=== Traitement cas retour de defaut ===//
	                IF #Liq_Mel._Mob_Pompe > -1 THEN
	                    #Ret_Arr_Imm_Mobile := "Arr_Imm_Mobile"("Index_Mobile" := #Liq_Mel._Mob_Pompe);
	                END_IF;
	                // Attente arret de la pompe
	                IF NOT "Test_Etat_Mobile"("Index_Mobile" := #Liq_Mel._Mob_Pompe, Etat := "Libre") THEN
	                    RETURN;
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne1) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne1,
	                                   Position := #POS_FERMETURE);
	                END_IF;
	                IF "Valid_Index"(#Liq_Mel._Mob_Vanne2) THEN
	                    "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne2,
	                                   Position := #POS_FERMETURE);
	                END_IF;
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Non Evol
	        REGION Cyclique Non Evol
	            #Liq_Mel.Dial_Def.Num_Def_Etape := 1;
	            #Liq_Mel.Dial_Def.Index_Defaut := "Dialog_Defaut"(Fg_Base := #Fg_Base, Msg_Defaut := CONCAT(IN1 := 'Defaut evolution du liquide ', IN2 := #Liq_Mel.Comp.Code_MP),
	                                                                 Type_Defaut := 0,
	                                                                 Automatisme := #Liq_Mel.Pt_Zs._SuiviCommun._CdProc,
	                                                                 Num_Lot := #Liq_Mel.Pt_Zs._SuiviCommun._NoLot,
	                                                                 Origine_Defaut := '',
	                                                                 Libelle_Origine := #Liq_Mel.CommunDos.Module_Commun._NomTache,
	                                                                 Acq1 := 'Relance',
	                                                                 Acq2 := 'Abandon',
	                                                                 Acq3 := '',
	                                                                 Acq4 := '',
	                                                                 Acq5 := '',
	                                                                 Acq6 := '',
	                                                                 Acq7 := '',
	                                                                 Acq8 := '',
	                                                                 Acq_Choisi := -1,
	                                                                 Date_Arrivee := #Tps_Act);
	               #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Att_Acq;
	            RETURN;
	        Non_Evol_DEF1:
	            //========================== Traitement des reponses defaut ==========================//
	            IF (#Liq_Mel.Dial_Def.Reponse_Def = 'Relance') THEN
	                // Reinitialisation de la tempo
	                #Ret_RD_SYS_T := RD_SYS_T(#Liq_Mel.CommunDos.Module_Commun._TpsPicke);
	                // RAZ message defaut
	                #Liq_Mel.Dial_Def.Reponse_Def := '';
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Demarrage;
	                RETURN;
	            END_IF;
	            IF (#Liq_Mel.Dial_Def.Reponse_Def = 'Abandon') THEN
	                // RAZ message defaut
	                #Liq_Mel.Dial_Def.Reponse_Def := '';
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Att_Liq_Pour_Chgt;
	                RETURN;
	            END_IF;
	            //========================== Traitement des reponses defaut ==========================//
	        END_REGION Cyclique Non Evol
	    #Etp_Chasse_Air:
	        REGION Preliminaire Chasse Air
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'CHASSE AIR';
	                #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone,
	                                          Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                          Niveau := "NIV_LIQ_CONS_ATTEINTE");
	                #Liq_Mel.CommunDos.Module_Commun._EtpPrec := #Liq_Mel.CommunDos.Module_Commun._Etp;
	                //=== Traitement cas retour de defaut ===//
	                IF #Liq_Mel.Dial_Def.Reponse_Def <> '' THEN
	                    CASE #Liq_Mel.Dial_Def.Num_Def_Etape OF
	                        1:
	                            GOTO Chasse_Air_DEF1;
	                    END_CASE;
	                END_IF;
	                //=== Traitement cas retour de defaut ===//
	                // MAJ stock compo
	                #Ret_Proc_MAJ_Stock := "Proc_MAJ_Stock"(Compo := #Liq_Mel.Comp, Err_Sql=> #Err_Sql, Msg_Def => #Msg_Def, Data_Dosage := #Liq_Mel.Pt_Zs);
	                IF ("dbSql4SiemensInterface".stSql4SiemensInterface.Observer.xTimeout) THEN
	                    #Aff_Def := TRUE;
	                    #Mess_Def := 'Connexion avec la base interrompue';
	                ELSIF #Ret_Proc_MAJ_Stock = 'NOK' OR (#Ret_Proc_MAJ_Stock = 'OK' AND #Msg_Def <> 'VIDE') THEN
	                    #Aff_Def := TRUE;
	                    #Mess_Def := #Msg_Def;
	                END_IF;
	                IF #Aff_Def THEN
	                    #Aff_Def := FALSE;
	                    #Liq_Mel.Dial_Def.Num_Def_Etape := 1;
	                    #Liq_Mel.Dial_Def.Index_Defaut := "Dialog_Defaut"(Fg_Base := #Fg_Base, Msg_Defaut := #Mess_Def,
	                                                                      Type_Defaut := 0,
	                                                                      Automatisme := #Liq_Mel.Pt_Zs._SuiviCommun._CdProc,
	                                                                      Num_Lot := #Liq_Mel.Pt_Zs._SuiviCommun._NoLot,
	                                                                      Origine_Defaut := 'Gest LIQ',
	                                                                      Libelle_Origine := 'Proc_MAJ_Stock',
	                                                                      Acq1 := 'Relance',
	                                                                      Acq2 := '',
	                                                                      Acq3 := '',
	                                                                      Acq4 := '',
	                                                                      Acq5 := '',
	                                                                      Acq6 := '',
	                                                                      Acq7 := '',
	                                                                      Acq8 := '',
	                                                                      Acq_Choisi := -1,
	                                                                      Date_Arrivee := #Tps_Act);
	                    #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Att_Acq;
	                    RETURN;
	                END_IF;
	            Chasse_Air_DEF1:
	                //============ Traitement des reponses pour le defaut Proc_MAJ_Stock ============//
	                IF (#Liq_Mel.Dial_Def.Reponse_Def = 'Relance') THEN
	                    // Vider la reponse defaut
	                    #Liq_Mel.Dial_Def.Reponse_Def := '';
	                    RETURN;
	                END_IF;
	                //============Traitement des reponses pour le defaut Proc_MAJ_Stock ============//
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Chasse Air
	        REGION Cyclique Chasse Air
	            IF "Valid_Index"(#Liq_Mel._Mob_Vanne_Air) THEN
	                "FC_Posit_Mob"(Index_Mob := #Liq_Mel._Mob_Vanne_Air,
	                               Position := #POS_OUVERTURE);
	            END_IF;
	            #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone,
	                                      Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                      Niveau := "NIV_LIQ_FIN_INJ");
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Att_Fin_Melang; 
	        END_REGION Cyclique Chasse Air
	    #Etp_Att_Fin_Melang:
	        REGION Preliminaire Att Fin Melang
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'ATT FIN MLG';
	                #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone,
	                                          Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                          Niveau := "NIV_LIQ_ATT_FIN_MEL");
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Fin Melang
	        REGION Cyclique Att Fin Melang
	            IF NOT "FC_Test_Niv_AmontAval"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone, Lst_Taches := #Liq_Mel.Lst_Taches_Att_Fin_Melang) THEN
	                RETURN;
	            END_IF;
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Fin_Lot;
	        END_REGION Cyclique Att Fin Melang
	    #Etp_Fin_Lot:
	        REGION Preliminaire Fin Lot 
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                #Liq_Mel.CommunDos.Module_Commun._DescEtp := 'FIN LOT';
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Fin Lot 
	        REGION Cyclique Fin Lot
	            #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Liq_Mel.CommunDos.Module_Commun._NumZone,
	                                      Num_Tache := #Liq_Mel.CommunDos.Module_Commun._Tache,
	                                      Niveau := "NIV_LIQ_FIN_LOT");
	            #Liq_Mel.CommunDos.Module_Commun._Etp := #Etp_Repos;
	        END_REGION Cyclique Fin Lot    
	    #Etp_Att_Acq:
	        REGION Preliminaire Att Acq
	            IF #Liq_Mel.CommunDos.Module_Commun._Etp <> #Liq_Mel.CommunDos.Module_Commun._EtpMemo THEN
	                
	                #Liq_Mel.CommunDos.Module_Commun._EtpMemo := #Liq_Mel.CommunDos.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Acq
	        REGION Cyclique Att Acq
	            #Liq_Mel.Dial_Def.Reponse_Def := "FC_Recup_Rep_Def"(Index_Def := #Liq_Mel.Dial_Def.Index_Defaut, Reponse_Ecrit => #Liq_Mel.Dial_Def.Text_Reponse);
	            IF #Liq_Mel.Dial_Def.Reponse_Def <> '' THEN
	                "FC_Raz_Def"(#Liq_Mel.Dial_Def.Index_Defaut);
	                #Liq_Mel.CommunDos.Module_Commun._Etp := #Liq_Mel.CommunDos.Module_Commun._EtpPrec;
	                RETURN;
	            END_IF;
	        END_REGION Cyclique Att Acq
	END_CASE;
END_FUNCTION

