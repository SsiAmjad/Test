FUNCTION "Gest_Circuit_Transfert" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Fg_Base : Bool;
      RAZ_Pt_Zs : "S_Suivi_Dosage";
   END_VAR

   VAR_IN_OUT 
      Cir_Trans : "S_Cir_Trans";
   END_VAR

   VAR_TEMP 
      Ret_Test_Lot_Att_Tache : SInt;
      Ret_Maj_Niv : SInt;
      Ret_Dem_Circuit : SInt;
      Ret_Test_Etat_Mobile : SInt;
      Etat_Origine_Circuit : USInt;
      Ret_Rech_Cir : SInt;
      Ret_Fin_Pos_Circuit : SInt;
      Ret_RD_SYS_T : Int;
      Tps_Act : Date_And_Time;
      Ret_Vid_Circuit : SInt;
      Ret_Vidange_Circuit_Cycl : Bool;
      Ret_Libere_Cir : SInt;
   END_VAR

   VAR CONSTANT 
      Etp_Repos : SInt := 0;
      Etp_Att_Aval : SInt := 1;
      Etp_Att_Amont : SInt := 2;
      Etp_Att_Circ_Libre : SInt := 3;
      Etp_Rech_Cir : SInt := 4;
      Etp_Prepositionnement : SInt := 5;
      Etp_Att_Circ_Pret : SInt := 6;
      Etp_Att_Fin_Amont : SInt := 7;
      Etp_Vidange_Circ : SInt := 8;
      Etp_Fin_Lot : SInt := 9;
      Etp_Att_acquittement : SInt := 10;
      Niv_Taches_Aval : USInt;
      Niv_Tache_Amont_PRES_PRD : USInt := 20;
      Niv_Fin_Taches_Amont : USInt;
   END_VAR


BEGIN
	//============= Affichage Etiquette =============//
	"FC_Affich_Etiquette"(Couleur := #Cir_Trans.Pt_Zs._SuiviCommun._Couleur,
	                      Cel_Dest := #Cir_Trans.Pt_Zs._Cel_Dest,
	                      CdMat := #Cir_Trans.Pt_Zs._SuiviCommun._CdMat,
	                      NoLot := #Cir_Trans.Pt_Zs._SuiviCommun._NoLot,
	                      QteLot := #Cir_Trans.Pt_Zs._SuiviCommun._QteLot,
	                      Desc_Etp := #Cir_Trans.DosCommun.Module_Commun._DescEtp,
	                      Etiquette := #Cir_Trans.DosCommun);
	//============= Affichage Etiquette =============//
	
	#Ret_RD_SYS_T := RD_SYS_T(#Tps_Act);
	CASE #Cir_Trans.DosCommun.Module_Commun._Etp OF
	    #Etp_Repos:
	        REGION Preliminaire Repos
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'REPOS';
	                #Cir_Trans.Pt_Zs := #RAZ_Pt_Zs;
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Repos
	        REGION Cyclique Repos
	            #Ret_Test_Lot_Att_Tache := "Test_Lot_Att_Tache"(Num_Tache := #Cir_Trans.DosCommun.Module_Commun._Tache,
	                                                            Num_Zone => #Cir_Trans.DosCommun.Module_Commun._NumZone);
	            IF #Ret_Test_Lot_Att_Tache = 1 THEN
	                #Cir_Trans.Pt_Zs := "DB_Data_Dosage"."THIS"[#Cir_Trans.DosCommun.Module_Commun._NumZone];
	                #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Cir_Trans.DosCommun.Module_Commun._NumZone,
	                                          Num_Tache := #Cir_Trans.DosCommun.Module_Commun._Tache,
	                                          Niveau := "NIV_CIRTRANS_DEBUT_LOT");
	                #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Att_Aval;
	                RETURN;
	            END_IF;
	        END_REGION Cyclique Repos
	    #Etp_Att_Aval:
	        REGION Preliminaire Att Aval
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'ATT AVAL';
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Aval
	        REGION Cyclique Att Aval
	            IF NOT "FC_Test_Niv_AmontAval"(Num_Zone := #Cir_Trans.DosCommun.Module_Commun._NumZone, Lst_Taches := #Cir_Trans.Lst_Att_Aval_Libre) THEN
	                RETURN;
	            END_IF;
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Att_Amont;
	            RETURN;
	        END_REGION Cyclique Att Aval
	    #Etp_Att_Amont:
	        REGION Preliminaire Att Amont
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'ATT AMONT';
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Amont
	        REGION Cyclique Att Amont
	            IF NOT "FC_Test_Niv_AmontAval"(Num_Zone := #Cir_Trans.DosCommun.Module_Commun._NumZone, Lst_Taches := #Cir_Trans.Lst_Att_Auto_Demar) THEN
	                RETURN;
	            END_IF;
	            "Maj_Qte_Tache"(Num_Tache := #Cir_Trans.DosCommun.Module_Commun._Tache,
	                            Num_Zone := #Cir_Trans.DosCommun.Module_Commun._NumZone,
	                            Qte := "Calc_Qte_Tache"(Num_Zone := #Cir_Trans.DosCommun.Module_Commun._NumZone, Lst_Amont := #Cir_Trans.Lst_Taches_Amont_Qte));
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Att_Circ_Libre;
	            RETURN;
	        END_REGION Cyclique Att Amont
	    #Etp_Att_Circ_Libre:
	        REGION Preliminaire Att Circ Libre
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Circ Libre
	        REGION Cyclique Att Circ Libre
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Rech_Cir;
	            RETURN;
	        END_REGION Cyclique Att Circ Libre  
	    #Etp_Rech_Cir:
	        REGION Preliminaire Rech Cir
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'RECH CIR';
	                //=== Traitement cas retour de defaut ===//
	                IF #Cir_Trans.Dial_Def.Reponse_Def <> '' THEN
	                    #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	                    CASE #Cir_Trans.Dial_Def.Num_Def_Etape OF
	                        1:
	                            GOTO Rech_Cir_DEF1;
	                    END_CASE;
	                END_IF;
	                //=== Traitement cas retour de defaut ===//
	                #Cir_Trans.DosCommun.Module_Commun._EtpPrec := #Cir_Trans.DosCommun.Module_Commun._Etp;
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Rech Cir
	        REGION Cyclique Rech Cir
	            #Ret_Rech_Cir := "Rech_Cir"(#Cir_Trans.Circuit);
	            IF #Ret_Rech_Cir = -1 THEN
	                // DIALOG DEFAUT
	                #Cir_Trans.Dial_Def.Num_Def_Etape := 1;
	                #Cir_Trans.Dial_Def.Index_Defaut := "Dialog_Defaut"(Fg_Base := #Fg_Base, Msg_Defaut := 'Circuit Introuvable',
	                                                                    Type_Defaut := 0,
	                                                                    Automatisme := #Cir_Trans.Pt_Zs._SuiviCommun._CdProc,
	                                                                    Num_Lot := #Cir_Trans.Pt_Zs._SuiviCommun._NoLot,
	                                                                    Origine_Defaut := #Cir_Trans.DosCommun.Module_Commun._NomTache,
	                                                                    Libelle_Origine := '',
	                                                                    Acq1 := 'Relance',
	                                                                    Acq2 := '',
	                                                                    Acq3 := '',
	                                                                    Acq4 := '',
	                                                                    Acq5 := '',
	                                                                    Acq6 := '',
	                                                                    Acq7 := '',
	                                                                    Acq8 := '',
	                                                                    Acq_Choisi := -1,
	                                                                    Date_Arrivee := #Tps_Act);
	                #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Att_acquittement;
	                RETURN;
	            END_IF;
	        Rech_Cir_DEF1:
	            IF (#Cir_Trans.Dial_Def.Reponse_Def = 'Relance') THEN
	                // RAZ message defaut
	                #Cir_Trans.Dial_Def.Reponse_Def := '';
	                RETURN;
	            END_IF;
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Prepositionnement;
	            RETURN;
	        END_REGION Cyclique Rech Cir
	    #Etp_Prepositionnement:
	        REGION Preliminaire Prepositionnement
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'PREPOSITIONNEMENT';
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Prepositionnement
	        REGION Cyclique Prepositionnement
	            #Ret_Dem_Circuit := "Dem_Circuit"(#Cir_Trans.Circuit);
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Att_Circ_Pret;
	            RETURN;
	        END_REGION Cyclique Prepositionnement
	    #Etp_Att_Circ_Pret:
	        REGION Preliminaire Att Circ Pret
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'ATT CIR PRET';
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Circ Pret
	        REGION Cyclique Att Circ Pret
	            IF NOT "Test_Etat_Mobile"(Index_Mobile := #Cir_Trans.Circuit.Mob_Circuit[0].Mobile, Etat := "Pret") THEN
	                RETURN;
	            END_IF;
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Att_Fin_Amont;
	            RETURN;
	        END_REGION Cyclique Att Circ Pret
	    #Etp_Att_Fin_Amont:
	        REGION Preliminaire Att Fin Amont
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'ATT FIN AMONT';
	                #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Cir_Trans.DosCommun.Module_Commun._NumZone, Num_Tache := #Cir_Trans.DosCommun.Module_Commun._Tache, Niveau := "NIV_CIRTRANS_CIR_TRANS_PRET");
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Fin Amont
	        REGION Cyclique Att Fin Amont
	            IF NOT "FC_Test_Niv_AmontAval"(Num_Zone := #Cir_Trans.DosCommun.Module_Commun._NumZone, Lst_Taches := #Cir_Trans.Lst_Att_Fin_Amont) THEN
	                RETURN;
	            END_IF;
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Vidange_Circ;
	            RETURN;
	        END_REGION Cyclique Att Fin Amont
	    #Etp_Vidange_Circ:
	        REGION Preliminaire Vidange Circ
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'VIDANGE';
	                //#Ret_Vid_Circuit := "Vid_Circuit"(#Cir_Trans.Circuit);
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Vidange Circ
	        REGION Cyclique Vidange Circ
	            IF NOT "Vid_Circuit_Cycl"(#Cir_Trans.Circuit) THEN
	                RETURN;
	            END_IF;
	            #Ret_Libere_Cir := "Libere_Circuit"(#Cir_Trans.Circuit); 
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Fin_Lot;
	            RETURN;
	        END_REGION Cyclique Vidange Circ
	    #Etp_Fin_Lot:
	        REGION Preliminaire Fin Lot
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                #Cir_Trans.DosCommun.Module_Commun._DescEtp := 'FIN LOT';
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Fin Lot
	        REGION Cyclique Fin Lot
	            IF "Valid_Index"(#Cir_Trans.Circuit.Destination) THEN
	                IF NOT "Test_Etat_Mobile"(Index_Mobile := #Cir_Trans.Circuit.Destination, Etat := "Libre") THEN
	                    RETURN;
	                END_IF;
	            END_IF;
	            #Ret_Maj_Niv := "Maj_Niv"(Num_Zone := #Cir_Trans.DosCommun.Module_Commun._NumZone,
	                                      Num_Tache := #Cir_Trans.DosCommun.Module_Commun._Tache,
	                                      Niveau := "NIV_CIRTRANS_CIR_FIN_LOT");
	            #Cir_Trans.DosCommun.Module_Commun._Etp := #Etp_Repos;
	            RETURN;
	        END_REGION Cyclique Fin Lot
	    #Etp_Att_acquittement:
	        REGION Preliminaire Att Acquittement
	            IF #Cir_Trans.DosCommun.Module_Commun._Etp <> #Cir_Trans.DosCommun.Module_Commun._EtpMemo THEN
	                
	                #Cir_Trans.DosCommun.Module_Commun._EtpMemo := #Cir_Trans.DosCommun.Module_Commun._Etp;
	            END_IF;
	        END_REGION Preliminaire Att Acquittement
	        REGION Cyclique Att Acquittement
	            #Cir_Trans.Dial_Def.Reponse_Def := "FC_Recup_Rep_Def"(Index_Def := #Cir_Trans.Dial_Def.Index_Defaut, Reponse_Ecrit => #Cir_Trans.Dial_Def.Text_Reponse);
	            IF #Cir_Trans.Dial_Def.Reponse_Def <> '' THEN
	                "FC_Raz_Def"(#Cir_Trans.Dial_Def.Index_Defaut);
	                #Cir_Trans.DosCommun.Module_Commun._Etp := #Cir_Trans.DosCommun.Module_Commun._EtpPrec;
	                RETURN;
	            END_IF;
	        END_REGION Cyclique Att Acquittement
	END_CASE;
END_FUNCTION

